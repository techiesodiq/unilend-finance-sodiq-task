{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\unilend-finance-sodiq-task\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const detectProvider = () => {\n    let provider;\n\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      window.alert(\"No Ethereum browser detected! Check out MetaMask\");\n    }\n\n    return provider;\n  };\n\n  const onLoginHandler = async () => {\n    const provider = detectProvider();\n\n    if (provider) {\n      if (provider !== window.ethereum) {\n        console.error(\"Not window.ethereum provider. Do you have multiple wallet installed ?\");\n      }\n\n      setIsConnecting(true);\n      await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      setIsConnecting(false);\n    }\n\n    props.onLogin(provider);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onLoginHandler,\n      className: classes.button,\n      type: \"button\",\n      children: [!isConnecting && \"Connect\", isConnecting && \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"wFTzW8g/nX5ciJ7yP5KH8paCcIk=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/unilend-finance-sodiq-task/src/components/Login/Login.js"],"names":["useState","Card","classes","Login","props","isConnecting","setIsConnecting","detectProvider","provider","window","ethereum","web3","currentProvider","alert","onLoginHandler","console","error","request","method","onLogin","login","button"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMO,cAAc,GAAG,MAAM;AAC3B,QAAIC,QAAJ;;AACA,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBF,MAAAA,QAAQ,GAAGC,MAAM,CAACC,QAAlB;AACD,KAFD,MAEO,IAAID,MAAM,CAACE,IAAX,EAAiB;AACtBH,MAAAA,QAAQ,GAAGC,MAAM,CAACE,IAAP,CAAYC,eAAvB;AACD,KAFM,MAEA;AACLH,MAAAA,MAAM,CAACI,KAAP,CAAa,kDAAb;AACD;;AACD,WAAOL,QAAP;AACD,GAVD;;AAYA,QAAMM,cAAc,GAAG,YAAY;AACjC,UAAMN,QAAQ,GAAGD,cAAc,EAA/B;;AACA,QAAIC,QAAJ,EAAc;AACZ,UAAIA,QAAQ,KAAKC,MAAM,CAACC,QAAxB,EAAkC;AAChCK,QAAAA,OAAO,CAACC,KAAR,CACE,uEADF;AAGD;;AACDV,MAAAA,eAAe,CAAC,IAAD,CAAf;AACA,YAAME,QAAQ,CAACS,OAAT,CAAiB;AACrBC,QAAAA,MAAM,EAAE;AADa,OAAjB,CAAN;AAGAZ,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;;AACDF,IAAAA,KAAK,CAACe,OAAN,CAAcX,QAAd;AACD,GAfD;;AAiBA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAEN,OAAO,CAACkB,KAAzB;AAAA,2BACE;AAAQ,MAAA,OAAO,EAAEN,cAAjB;AAAiC,MAAA,SAAS,EAAEZ,OAAO,CAACmB,MAApD;AAA4D,MAAA,IAAI,EAAC,QAAjE;AAAA,iBACG,CAAChB,YAAD,IAAiB,SADpB,EAEGA,YAAY,IAAI,YAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAxCD;;GAAMF,K;;KAAAA,K;AA0CN,eAAeA,KAAf","sourcesContent":["import { useState } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\n\nconst Login = (props) => {\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const detectProvider = () => {\n    let provider;\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      window.alert(\"No Ethereum browser detected! Check out MetaMask\");\n    }\n    return provider;\n  };\n\n  const onLoginHandler = async () => {\n    const provider = detectProvider();\n    if (provider) {\n      if (provider !== window.ethereum) {\n        console.error(\n          \"Not window.ethereum provider. Do you have multiple wallet installed ?\"\n        );\n      }\n      setIsConnecting(true);\n      await provider.request({\n        method: \"eth_requestAccounts\",\n      });\n      setIsConnecting(false);\n    }\n    props.onLogin(provider);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <button onClick={onLoginHandler} className={classes.button} type=\"button\">\n        {!isConnecting && \"Connect\"}\n        {isConnecting && \"Loading...\"}\n      </button>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}