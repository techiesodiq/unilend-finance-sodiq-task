{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\unilend-finance-sodiq-task\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport { Form, Formik } from \"formik\";\nimport { useState } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const [isConnecting, setIsConnecting] = useState(false);\n  const formikInitialValues = {\n    tokenContactAddress: \"\",\n    receiverAddress: \"\",\n    amount: \"\"\n  };\n\n  const detectProvider = () => {\n    let provider;\n\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      window.alert(\"No Ethereum browser detected! Check out MetaMask\");\n    }\n\n    return provider;\n  };\n\n  const onLoginHandler = async () => {\n    const provider = detectProvider();\n\n    if (provider) {\n      if (provider !== window.ethereum) {\n        console.error(\"Not window.ethereum provider. Do you have multiple wallet installed ?\");\n      }\n\n      setIsConnecting(true);\n      await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      setIsConnecting(false);\n    }\n\n    props.onLogin(provider);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: formikInitialValues,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: classes.form,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.formInput,\n          name: \"tokenContactAddress\",\n          type: \"text\",\n          placeholder: \"Enter your token contact address\",\n          id: \"token_contact_address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.formInput,\n          name: \"receiverAddress\",\n          type: \"text\",\n          placeholder: \"Enter the receiver address\",\n          id: \"receiver_address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.formInput,\n          name: \"amount\",\n          type: \"number\",\n          placeholder: \"Enter amount\",\n          id: \"amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onLoginHandler,\n          className: classes.button,\n          type: \"button\",\n          children: [!isConnecting && \"Connect\", isConnecting && \"Loading...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Login, \"wFTzW8g/nX5ciJ7yP5KH8paCcIk=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/unilend-finance-sodiq-task/src/components/Login/Login.js"],"names":["Form","Formik","useState","Card","classes","Login","props","isConnecting","setIsConnecting","formikInitialValues","tokenContactAddress","receiverAddress","amount","detectProvider","provider","window","ethereum","web3","currentProvider","alert","onLoginHandler","console","error","request","method","onLogin","login","form","formInput","button"],"mappings":"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","sourcesContent":["/** @format */\n\nimport {Form, Formik} from \"formik\";\nimport {useState} from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\n\nconst Login = (props) => {\n\tconst [isConnecting, setIsConnecting] = useState(false);\n\n\tconst formikInitialValues = {\n\t\ttokenContactAddress: \"\",\n\t\treceiverAddress: \"\",\n\t\tamount: \"\",\n\t};\n\n\tconst detectProvider = () => {\n\t\tlet provider;\n\t\tif (window.ethereum) {\n\t\t\tprovider = window.ethereum;\n\t\t} else if (window.web3) {\n\t\t\tprovider = window.web3.currentProvider;\n\t\t} else {\n\t\t\twindow.alert(\"No Ethereum browser detected! Check out MetaMask\");\n\t\t}\n\t\treturn provider;\n\t};\n\n\tconst onLoginHandler = async () => {\n\t\tconst provider = detectProvider();\n\t\tif (provider) {\n\t\t\tif (provider !== window.ethereum) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t\"Not window.ethereum provider. Do you have multiple wallet installed ?\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tsetIsConnecting(true);\n\t\t\tawait provider.request({\n\t\t\t\tmethod: \"eth_requestAccounts\",\n\t\t\t});\n\t\t\tsetIsConnecting(false);\n\t\t}\n\t\tprops.onLogin(provider);\n\t};\n\n\treturn (\n\t\t<Card className={classes.login}>\n\t\t\t<Formik initialValues={formikInitialValues}>\n\t\t\t\t<Form className={classes.form}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName={classes.formInput}\n\t\t\t\t\t\tname=\"tokenContactAddress\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Enter your token contact address\"\n\t\t\t\t\t\tid=\"token_contact_address\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName={classes.formInput}\n\t\t\t\t\t\tname=\"receiverAddress\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Enter the receiver address\"\n\t\t\t\t\t\tid=\"receiver_address\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName={classes.formInput}\n\t\t\t\t\t\tname=\"amount\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tplaceholder=\"Enter amount\"\n\t\t\t\t\t\tid=\"amount\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={onLoginHandler}\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{!isConnecting && \"Connect\"}\n\t\t\t\t\t\t{isConnecting && \"Loading...\"}\n\t\t\t\t\t</button>\n\t\t\t\t</Form>\n\t\t\t</Formik>\n\t\t</Card>\n\t);\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}